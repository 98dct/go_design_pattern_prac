
代码设计
1.可维护性：添加代码、修改代码不会引起线上bug
2.可读性：团队成员都能很好的读懂
3.可扩展性：预留了扩展的地方，便于扩展，不影响原来的主逻辑
4.灵活性：包含上述几个特征
5.简洁性
6.可复用性
7.可测试性

一、面向对象
二、设计原则：
SRP单一职责原则：一个结构体只承担一个事情
OCP开闭原则：实现不可修改，但面向可扩展
LSP里氏替换原则：子类型能够替换它们的基类型
ISP接口隔离原则: 抽象不持有特定逻辑，应持有实现的公有逻辑
DIP依赖倒置原则：底层不能互相依赖，应同时依赖抽象
DRY原则：不做重复的事，不写重复类似的代码
KISS原则：keep it simple，尽量简单的代码，让代码更容易被别人理解
YANGNI原则：you ain't gonna need it，只着眼必需的功能，不添加认为可能需要的功能
LOD原则：类应减少被外界直接访问的机会，类与类之间避免直接通信

三、设计模式
创建型模式：
常用：单例模式、工厂模式（工厂方法和抽象工厂）、建造者模式
不常用：原型模式

结构型：
常用的：代理模式、桥接模式、装饰器模式、适配器模式
不常用：门面模式、组合模式、享元模式

行为型：
常用：观察者模式、模版模式、策略模式、职责链模式、迭代器模式、状态模式
不常用：访问者模式、备忘录模式、命令模式、解释器模式、中介模式

四、编程规范
五、代码重构