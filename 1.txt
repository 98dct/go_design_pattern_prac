
代码设计
1.可维护性：添加代码、修改代码不会引起线上bug
2.可读性：团队成员都能很好的读懂
3.可扩展性：预留了扩展的地方，便于扩展，不影响原来的主逻辑
4.灵活性：包含上述几个特征
5.简洁性
6.可复用性
7.可测试性

一、面向对象
我们是围绕着对象或类来做需求分析和设计的。分析和设计两个阶段最终的产出是类的设计，包括程序被拆解为哪些类，每个类有哪些属性方法，类与类之间如何交互等等。
它们比其他的分析和设计更加具体、更加落地、更加贴近编码，更能够顺利地过渡到面向对象编程环节。这也是面向对象分析和设计，与其他分析和设计最大的不同点
面向对象分析：搞清楚做什么
面向对象设计：搞清楚怎么做
面向对象编程：就是将类或者对象作为组织代码的基本单元，并将封装、继承、抽象、多态这几个特性作为代码设计和实现的基石

1.封装：就是访问权限控制，go中就是结构体的字段和方法，字段和方法的首字母大写的话，结构体对象的字段和方法在包内和包外都可以访问，小写的话，对象的字段和方法只能在包内访问
生产中能小写的字段和方法，要尽可能小写，只给包外暴露必要的字段和方法权限
2.抽象：go中通过接口来暴漏方法，隐藏了内部的实现细节，调用方只需要关注，方法的作用，入参和出参即可
3.继承：主要是为了代码复用，go中使用组合来实现类似的继承效果，在一个结构体中嵌入另一个结构体即拥有了这个结构体的全部字段和方法，实现了代码复用，不要重写
4.多态：go中多态和抽象都是通过接口来实现的，一个接口（resource接口）定义了一些公共的方法（creat,update,destroy等），被一些结构体实现这些方法，这个过程中，接口就是抽象了一些公共的行为，
实现了这些方法的结构体，就是这个接口的多种形态，在函数传参时，通过接口类型作为入参，就可以支持多种结构体实现
go中的编译时多态: 范型  函数参数支持多种类型，但是编译时就确定了具体类型是哪一个
go中的运行时多态: 接口与实现  可以给接口类型传递不同的实现，代码形式上为接口类型调用接口的方法，运行时会动态调用实现的方法


二、设计原则：
SRP单一职责原则：一个结构体只承担一个事情
OCP开闭原则：实现不可修改，但面向可扩展
LSP里氏替换原则：子类型能够替换它们的基类型
ISP接口隔离原则: 抽象不持有特定逻辑，应持有实现的公有逻辑
DIP依赖倒置原则：底层不能互相依赖，应同时依赖抽象
DRY原则：不做重复的事，不写重复类似的代码
KISS原则：keep it simple，尽量简单的代码，让代码更容易被别人理解
YANGNI原则：you ain't gonna need it，只着眼必需的功能，不添加认为可能需要的功能
LOD原则：类应减少被外界直接访问的机会，类与类之间避免直接通信

三、设计模式
创建型模式：
常用：单例模式、工厂模式（工厂方法和抽象工厂）、建造者模式
不常用：原型模式

结构型：
常用的：代理模式、桥接模式、装饰器模式、适配器模式
不常用：门面模式、组合模式、享元模式

行为型：
常用：观察者模式、模版模式、策略模式、职责链模式、迭代器模式、状态模式
不常用：访问者模式、备忘录模式、命令模式、解释器模式、中介模式

四、编程规范
五、代码重构